import struct MacroCore.Buffer
import class  multer.MultiPartParser
import class  http.IncomingMessage
import struct NIO.ByteBuffer

enum Fixtures {

  /**
   * Contains:
   * - form field `title` with value `file.csv`
   * - file field `file`, empty filename, empty content
   */
  enum SimpleFormData {
    static let filename = ""
    static let boundary = "----WebKitFormBoundaryHU6Dqpfe9L4ATppg"
    static let data = Buffer(
      """
      --\(boundary)\r
      Content-Disposition: form-data; name="title"\r
      \r
      file.csv\r
      --\(boundary)\r
      Content-Disposition: form-data; name="file"; filename=""\r
      Content-Type: application/octet-stream\r
      \r
      \r
      --\(boundary)--\r\n
      """
    )
    
    static let expectedEvents = expectedPrefixEvents + [ .endPart ]
    static let expectedPrefixEvents : [ MultiPartParser.Event ] = [
      .startPart([
        ( "Content-Disposition" , "form-data; name=\"title\"" )
      ]),
      .bodyData(Buffer("file.csv")),
      .endPart,
      .startPart([
        ( "Content-Disposition" , "form-data; name=\"file\"; filename=\"\"" ),
        ( "Content-Type"        , "application/octet-stream" )
      ])
    ]
    
    static var request : IncomingMessage {
      return .init(boundary: boundary, content: data)
    }
  }
  
  /**
   * Contains:
   * - form field `title` with value `file.csv`
   * - file field `file`, filename `bugicon.png`, a PNG file
   */
  enum ImageSubmitData {

    static var request : IncomingMessage {
      return .init(boundary: boundary, content: data)
    }
    
    static let filename = "bugicon.png"

    static let icon = try! Buffer.from(
      "89504e470d0a1a0a0000000d494844520000002e0000001a0806000000c8526e8c0000017c694343504943432050726f66696c65000028916360602a492c28c861616060c8cd2b290a72775288888c5260bfc3c0cdc0c320c460c5209e985c5ce01810e0c380137cbbc6c008a22feb82cc4af3fc79d3a6b57cfe1636af997256253ab8f58101774a6a713203032307909d9c529c9c0b64e700d93ac905452540f60c205bb7bca400c43e01648b14011d0864df01b1d321ec0f20761298cdc402561312e40c644b00d9024910b606889d0e615b80d8c919892940b607c82e881bc080d3c345c1dcc052d79180bb4906b939a5303b40a1c5939a171a0c720710cb307830b8302830983318305832e8323896a4569480143ae717541665a66794283802433655c1393fb7a0b424b54847c1332f594f47c1c8c0d000a40e146710a33f07814d67143b8f10cb5fc8c060a9ccc0c0dc83104b9ac6c0b07d0f0383c4298498ca3c06067e6b06866de70a128b12e10e67fcc642885f9c666c0461f3383130b0defbffffb31a0303fb240686bf13ffffffbde8ffffbf8b81f603e3ec400e00247769e08c6b120f00000062655849664d4d002a000000080002011200030000000100010000876900040000000100000026000000000003928600070000001200000050a0020004000000010000002ea0030004000000010000001a00000000415343494900000053637265656e73686f747a0998af0000023d69545874584d4c3a636f6d2e61646f62652e786d7000000000003c783a786d706d65746120786d6c6e733a783d2261646f62653a6e733a6d6574612f2220783a786d70746b3d22584d5020436f726520362e302e30223e0a2020203c7264663a52444620786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f72672f313939392f30322f32322d7264662d73796e7461782d6e7323223e0a2020202020203c7264663a4465736372697074696f6e207264663a61626f75743d22220a202020202020202020202020786d6c6e733a657869663d22687474703a2f2f6e732e61646f62652e636f6d2f657869662f312e302f220a202020202020202020202020786d6c6e733a746966663d22687474703a2f2f6e732e61646f62652e636f6d2f746966662f312e302f223e0a2020202020202020203c657869663a506978656c5944696d656e73696f6e3e3132353c2f657869663a506978656c5944696d656e73696f6e3e0a2020202020202020203c657869663a55736572436f6d6d656e743e53637265656e73686f743c2f657869663a55736572436f6d6d656e743e0a2020202020202020203c657869663a506978656c5844696d656e73696f6e3e3133343c2f657869663a506978656c5844696d656e73696f6e3e0a2020202020202020203c746966663a4f7269656e746174696f6e3e313c2f746966663a4f7269656e746174696f6e3e0a2020202020203c2f7264663a4465736372697074696f6e3e0a2020203c2f7264663a5244463e0a3c2f783a786d706d6574613e0a4e8e3654000001e7494441545809ed96414b025110c7fffb5450bb59a0b9e9a16e4bd8c9ea1b149db26e590875e81c51d9a163e00708ba45d61710eb1a829754361504adb0dc203353c10e7a28d4dc85846237378a55c139bd37fb67e6b7336fdf2cc53d3c37d083467a905940ee832bddb97ec5fb15975901128db282341cba847b6713c56241d8dfdede607b6b03d9eca3cc50cacac8e1e101eeeed2989c9ac6e0d010bcc747787f7f83d77b04bb7d0a343da22c91cc6c646c740cd12b161445616d6d1d19ee1e1ecf3ed42a151c0b8b32c3282f23c3661a4fb9ac90d960306076660e5ce61ef38e45a8d51ae58964662485c20b8c469320af562a08042e60a669f8fd3ed46a359961949791eb541236db8490f9e4f418469309bbee3dbc96cb383bf3294a54afd751ad5665e524ce651718661c914808b1d8155cae55e80706b0e45cc1f9b91f1c979115e8af22bebbe17018c16010e974ba6d38aa1bfe0e1b8d06589645a9546a01330c03abd5dada7f5f74c5c88fc7e35fa079c8542a855c2ef79db7b5ef38783299443e9f6f017d2ef82e241209549a178698a9c59c4afa743a1d2c16cbaf53761c5cafd78310e9c6ab9a8350cc3a0ece9f6ffe5848193fd1c53e52e957958af4cf7ead56fb63448d467c7a77c575f823b9c4c38e575c82abadbb0fdeb644ff2ce8d98a7f00645896749b4163b70000000049454e44ae426082",
      "hex"
    )
    
    static let data = try! Buffer.from(
      "2d2d2d2d2d2d5765624b6974466f726d426f756e646172796e4d5734486c4939703361396d7655770d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d227469746c65220d0a0d0a66696c652e6373760d0a2d2d2d2d2d2d5765624b6974466f726d426f756e646172796e4d5734486c4939703361396d7655770d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d2266696c65223b2066696c656e616d653d2262756769636f6e2e706e67220d0a436f6e74656e742d547970653a20696d6167652f706e670d0a0d0a89504e470d0a1a0a0000000d494844520000002e0000001a0806000000c8526e8c0000017c694343504943432050726f66696c65000028916360602a492c28c861616060c8cd2b290a72775288888c5260bfc3c0cdc0c320c460c5209e985c5ce01810e0c380137cbbc6c008a22feb82cc4af3fc79d3a6b57cfe1636af997256253ab8f58101774a6a713203032307909d9c529c9c0b64e700d93ac905452540f60c205bb7bca400c43e01648b14011d0864df01b1d321ec0f20761298cdc402561312e40c644b00d9024910b606889d0e615b80d8c919892940b607c82e881bc080d3c345c1dcc052d79180bb4906b939a5303b40a1c5939a171a0c720710cb307830b8302830983318305832e8323896a4569480143ae717541665a66794283802433655c1393fb7a0b424b54847c1332f594f47c1c8c0d000a40e146710a33f07814d67143b8f10cb5fc8c060a9ccc0c0dc83104b9ac6c0b07d0f0383c4298498ca3c06067e6b06866de70a128b12e10e67fcc642885f9c666c0461f3383130b0defbffffb31a0303fb240686bf13ffffffbde8ffffbf8b81f603e3ec400e00247769e08c6b120f00000062655849664d4d002a000000080002011200030000000100010000876900040000000100000026000000000003928600070000001200000050a0020004000000010000002ea0030004000000010000001a00000000415343494900000053637265656e73686f747a0998af0000023d69545874584d4c3a636f6d2e61646f62652e786d7000000000003c783a786d706d65746120786d6c6e733a783d2261646f62653a6e733a6d6574612f2220783a786d70746b3d22584d5020436f726520362e302e30223e0a2020203c7264663a52444620786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f72672f313939392f30322f32322d7264662d73796e7461782d6e7323223e0a2020202020203c7264663a4465736372697074696f6e207264663a61626f75743d22220a202020202020202020202020786d6c6e733a657869663d22687474703a2f2f6e732e61646f62652e636f6d2f657869662f312e302f220a202020202020202020202020786d6c6e733a746966663d22687474703a2f2f6e732e61646f62652e636f6d2f746966662f312e302f223e0a2020202020202020203c657869663a506978656c5944696d656e73696f6e3e3132353c2f657869663a506978656c5944696d656e73696f6e3e0a2020202020202020203c657869663a55736572436f6d6d656e743e53637265656e73686f743c2f657869663a55736572436f6d6d656e743e0a2020202020202020203c657869663a506978656c5844696d656e73696f6e3e3133343c2f657869663a506978656c5844696d656e73696f6e3e0a2020202020202020203c746966663a4f7269656e746174696f6e3e313c2f746966663a4f7269656e746174696f6e3e0a2020202020203c2f7264663a4465736372697074696f6e3e0a2020203c2f7264663a5244463e0a3c2f783a786d706d6574613e0a4e8e3654000001e7494441545809ed96414b025110c7fffb5450bb59a0b9e9a16e4bd8c9ea1b149db26e590875e81c51d9a163e00708ba45d61710eb1a829754361504adb0dc203353c10e7a28d4dc85846237378a55c139bd37fb67e6b7336fdf2cc53d3c37d083467a905940ee832bddb97ec5fb15975901128db282341cba847b6713c56241d8dfdede607b6b03d9eca3cc50cacac8e1e101eeeed2989c9ac6e0d010bcc747787f7f83d77b04bb7d0a343da22c91cc6c646c740cd12b161445616d6d1d19ee1e1ecf3ed42a151c0b8b32c3282f23c3661a4fb9ac90d960306076660e5ce61ef38e45a8d51ae58964662485c20b8c469320af562a08042e60a669f8fd3ed46a359961949791eb541236db8490f9e4f418469309bbee3dbc96cb383bf3294a54afd751ad5665e524ce651718661c914808b1d8155cae55e80706b0e45cc1f9b91f1c979115e8af22bebbe17018c16010e974ba6d38aa1bfe0e1b8d06589645a9546a01330c03abd5dada7f5f74c5c88fc7e35fa079c8542a855c2ef79db7b5ef38783299443e9f6f017d2ef82e241209549a178698a9c59c4afa743a1d2c16cbaf53761c5cafd78310e9c6ab9a8350cc3a0ece9f6ffe5848193fd1c53e52e957958af4cf7ead56fb63448d467c7a77c575f823b9c4c38e575c82abadbb0fdeb644ff2ce8d98a7f00645896749b4163b70000000049454e44ae4260820d0a2d2d2d2d2d2d5765624b6974466f726d426f756e646172796e4d5734486c4939703361396d7655772d2d0d0a",
      "hex"
    )
    static let boundary : String = "----WebKitFormBoundarynMW4HlI9p3a9mvUw"

    static let expectedEvents : [ MultiPartParser.Event ] = [
      .startPart([
        ( "Content-Disposition" , "form-data; name=\"title\"" )
      ]),
      .bodyData(Buffer("file.csv")),
      .endPart,
      .startPart([
        ( "Content-Disposition" ,
          "form-data; name=\"file\"; filename=\"bugicon.png\"" ),
        ( "Content-Type"        , "image/png" )
      ]),
      .bodyData(icon),
      .endPart
    ]
  }
  
  /**
   * Contains:
   * - form field `title` with value `file.csv`
   * - file field `file`, filename `hello.c`, a C file (octet-stream)
   * - file field `file`, filename `bugicon.png`, a PNG file
   */
  enum TwoFilesSubmit {
    static var request : IncomingMessage {
      return .init(boundary: boundary, content: data)
    }
    static let filenames = [ "hello.c", "bugicon.png" ]
    static let boundary  = "----WebKitFormBoundaryGjOAEhkMUIaUiYpb"
    static let data = try! Buffer.from(
      "2d2d2d2d2d2d5765624b6974466f726d426f756e64617279476a4f4145686b4d55496155695970620d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d227469746c65220d0a0d0a66696c652e6373760d0a2d2d2d2d2d2d5765624b6974466f726d426f756e64617279476a4f4145686b4d55496155695970620d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d2266696c65223b2066696c656e616d653d2268656c6c6f2e63220d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6f637465742d73747265616d0d0a0d0a23696e636c756465203c737464696f2e683e0a6d61696e2829207b0a202070757473282248656c6c6f2122293b0a7d0a0a0d0a2d2d2d2d2d2d5765624b6974466f726d426f756e64617279476a4f4145686b4d55496155695970620d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d2266696c65223b2066696c656e616d653d2262756769636f6e2e706e67220d0a436f6e74656e742d547970653a20696d6167652f706e670d0a0d0a89504e470d0a1a0a0000000d494844520000002e0000001a0806000000c8526e8c0000017c694343504943432050726f66696c65000028916360602a492c28c861616060c8cd2b290a72775288888c5260bfc3c0cdc0c320c460c5209e985c5ce01810e0c380137cbbc6c008a22feb82cc4af3fc79d3a6b57cfe1636af997256253ab8f58101774a6a713203032307909d9c529c9c0b64e700d93ac905452540f60c205bb7bca400c43e01648b14011d0864df01b1d321ec0f20761298cdc402561312e40c644b00d9024910b606889d0e615b80d8c919892940b607c82e881bc080d3c345c1dcc052d79180bb4906b939a5303b40a1c5939a171a0c720710cb307830b8302830983318305832e8323896a4569480143ae717541665a66794283802433655c1393fb7a0b424b54847c1332f594f47c1c8c0d000a40e146710a33f07814d67143b8f10cb5fc8c060a9ccc0c0dc83104b9ac6c0b07d0f0383c4298498ca3c06067e6b06866de70a128b12e10e67fcc642885f9c666c0461f3383130b0defbffffb31a0303fb240686bf13ffffffbde8ffffbf8b81f603e3ec400e00247769e08c6b120f00000062655849664d4d002a000000080002011200030000000100010000876900040000000100000026000000000003928600070000001200000050a0020004000000010000002ea0030004000000010000001a00000000415343494900000053637265656e73686f747a0998af0000023d69545874584d4c3a636f6d2e61646f62652e786d7000000000003c783a786d706d65746120786d6c6e733a783d2261646f62653a6e733a6d6574612f2220783a786d70746b3d22584d5020436f726520362e302e30223e0a2020203c7264663a52444620786d6c6e733a7264663d22687474703a2f2f7777772e77332e6f72672f313939392f30322f32322d7264662d73796e7461782d6e7323223e0a2020202020203c7264663a4465736372697074696f6e207264663a61626f75743d22220a202020202020202020202020786d6c6e733a657869663d22687474703a2f2f6e732e61646f62652e636f6d2f657869662f312e302f220a202020202020202020202020786d6c6e733a746966663d22687474703a2f2f6e732e61646f62652e636f6d2f746966662f312e302f223e0a2020202020202020203c657869663a506978656c5944696d656e73696f6e3e3132353c2f657869663a506978656c5944696d656e73696f6e3e0a2020202020202020203c657869663a55736572436f6d6d656e743e53637265656e73686f743c2f657869663a55736572436f6d6d656e743e0a2020202020202020203c657869663a506978656c5844696d656e73696f6e3e3133343c2f657869663a506978656c5844696d656e73696f6e3e0a2020202020202020203c746966663a4f7269656e746174696f6e3e313c2f746966663a4f7269656e746174696f6e3e0a2020202020203c2f7264663a4465736372697074696f6e3e0a2020203c2f7264663a5244463e0a3c2f783a786d706d6574613e0a4e8e3654000001e7494441545809ed96414b025110c7fffb5450bb59a0b9e9a16e4bd8c9ea1b149db26e590875e81c51d9a163e00708ba45d61710eb1a829754361504adb0dc203353c10e7a28d4dc85846237378a55c139bd37fb67e6b7336fdf2cc53d3c37d083467a905940ee832bddb97ec5fb15975901128db282341cba847b6713c56241d8dfdede607b6b03d9eca3cc50cacac8e1e101eeeed2989c9ac6e0d010bcc747787f7f83d77b04bb7d0a343da22c91cc6c646c740cd12b161445616d6d1d19ee1e1ecf3ed42a151c0b8b32c3282f23c3661a4fb9ac90d960306076660e5ce61ef38e45a8d51ae58964662485c20b8c469320af562a08042e60a669f8fd3ed46a359961949791eb541236db8490f9e4f418469309bbee3dbc96cb383bf3294a54afd751ad5665e524ce651718661c914808b1d8155cae55e80706b0e45cc1f9b91f1c979115e8af22bebbe17018c16010e974ba6d38aa1bfe0e1b8d06589645a9546a01330c03abd5dada7f5f74c5c88fc7e35fa079c8542a855c2ef79db7b5ef38783299443e9f6f017d2ef82e241209549a178698a9c59c4afa743a1d2c16cbaf53761c5cafd78310e9c6ab9a8350cc3a0ece9f6ffe5848193fd1c53e52e957958af4cf7ead56fb63448d467c7a77c575f823b9c4c38e575c82abadbb0fdeb644ff2ce8d98a7f00645896749b4163b70000000049454e44ae4260820d0a2d2d2d2d2d2d5765624b6974466f726d426f756e64617279476a4f4145686b4d55496155695970622d2d0d0a",
      "hex"
    )
    
    // newline rules for multiline literals are funny
    static let cFile =
      """
      #include <stdio.h>
      main() {
        puts("Hello!");
      }
      \n
      """
    
    static let icon = ImageSubmitData.icon

    static let expectedEvents : [ MultiPartParser.Event ] = [
      .startPart([
        ( "Content-Disposition" , "form-data; name=\"title\"" )
      ]),
      .bodyData(Buffer("file.csv")),
      .endPart,
      
      .startPart([
        ( "Content-Disposition" ,
          "form-data; name=\"file\"; filename=\"hello.c\"" ),
        ( "Content-Type"        , "application/octet-stream" )
      ]),
      .bodyData(Buffer(cFile)),
      .endPart,
      
      .startPart([
        ( "Content-Disposition" ,
          "form-data; name=\"file\"; filename=\"bugicon.png\"" ),
        ( "Content-Type"        , "image/png" )
      ]),
      .bodyData(icon),
      .endPart
    ]
  }
  
  /**
   * Contains:
   * - form field `title` with value `file.csv`
   * - file field `file`, filename `emptyfile.bin`, ~3MB of empty bytes
   */
  enum LargeEmptyFile {

    static var request : IncomingMessage {
      return .init(boundary: boundary, content: data)
    }
    
    static let boundary : String = "----WebKitFormBoundarynMW4HlI9p3a9mvUw"

    static let filename = "emptyfile.bin"
    
    static let largeEmptyData =
                 Buffer(ByteBuffer(repeating: 0, count: 2_896_967))
    
    static let data : Buffer = {
      var buffer = Buffer(capacity: 3 * 1024 * 1024)
      buffer.append(Buffer(
        """
        --\(boundary)\r
        Content-Disposition: form-data; name="title"\r
        \r
        file.csv\r
        --\(boundary)\r
        Content-Disposition: form-data; name="file"; filename="\(filename)"\r
        Content-Type: application/octet-stream\r
        \r\n
        """
      ))
      
      buffer.append(largeEmptyData)
      
      buffer.append(Buffer(
        """
        \r
        --\(boundary)--\r\n
        """
      ))

      return buffer
    }()
    
    static let expectedPrefixEvents : [ MultiPartParser.Event ] = [
      .startPart([
        ( "Content-Disposition" , "form-data; name=\"title\"" )
      ]),
      .bodyData(Buffer("file.csv")),
      .endPart,
      .startPart([
        ( "Content-Disposition" ,
          "form-data; name=\"file\"; filename=\"\(filename)\"" ),
        ( "Content-Type"        , "application/octet-stream" )
      ])
    ]
  }
}

fileprivate extension IncomingMessage {
  
  convenience init(boundary: String, content data: Buffer) {
    self.init(
      .init(version: .init(major: 1, minor: 1),
      method: .POST, uri: "/post", headers: [
        "Content-Type": "multipart/form-data; boundary=\(boundary)"
      ])
    )
    push(data)
    push(nil) // EOF
  }
}
